/**********************************************************************
* Note: This license has also been called the "New BSD License" or
* "Modified BSD License". See also the 2-clause BSD License.
*
* Copyright Â© 2018-2019 - General Electric Company, All Rights Reserved
*
* Project: KApEESH, developed with the support of the Defense Advanced
* Research Projects Agency (DARPA) under Agreement  No.  HR00111990007.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
* 1. Redistributions of source code must retain the above copyright notice,
*    this list of conditions and the following disclaimer.
*
* 2. Redistributions in binary form must reproduce the above copyright notice,
*    this list of conditions and the following disclaimer in the documentation
*    and/or other materials provided with the distribution.
*
* 3. Neither the name of the copyright holder nor the names of its
*    contributors may be used to endorse or promote products derived
*    from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
* THE POSSIBILITY OF SUCH DAMAGE.
*
***********************************************************************/

prefix cg:<http://aske.ge.com/compgraphmodel#>
prefix imp:<http://sadl.org/sadlimplicitmodel#>
prefix sci:<http://aske.ge.com/sciknow#>
prefix list:<http://sadl.org/sadllistmodel#>

#insert {?EqCh cg:parent ?EqPa}
select distinct ?EqCh ?EqPa ?V
where {
 ?EqCh imp:genericInput ?V.
 ?EqPa imp:genericOutput ?V.

  filter( ?EqPa != ?EqCh)
  filter not exists {?EqCh imp:dependsOn ?EqPa}
  filter not exists {?EqPa imp:dependsOn ?EqCh}
  filter not exists {?EqCh imp:versionOf ?EqPa}
  filter not exists {?EqPa imp:versionOf ?EqCh}

  filter not exists {
    ?EqCh imp:genericOutput ?V1.
    ?EqPa imp:genericInput ?V1.
    filter not exists {?EqPa imp:genericOutput ?V1.}
  }
} order by ?EqCh



prefix cg:<http://aske.ge.com/compgraphmodel#>
prefix imp:<http://sadl.org/sadlimplicitmodel#>
prefix sci:<http://aske.ge.com/sciknow#>
prefix list:<http://sadl.org/sadllistmodel#>

select distinct ?Eq ?In ?Out 
#insert
#construct
#{ ?Eq imp:genericInput ?In. ?Eq imp:genericOutput ?Out. }
where {
  
 {?Eq imp:returnTypes ?AL1.
  ?AL1 list:rest*/list:first ?AO1.
  ?AO1 imp:augmentedType ?Type1.
  ?Type1 imp:constraints ?CL1.
  ?CL1 rdf:rest*/rdf:first ?C1.
  ?C1 imp:gpPredicate ?P.
  ?P rdfs:range ?Out. }

  union {
    ?Eq imp:implicitOutput/imp:augmentedType/imp:semType ?Out.
    filter not exists{?Eq a imp:IntializerMethod} }

  union{
   ?Eq imp:arguments ?AL2.
   ?AL2 list:rest*/list:first ?AO2.
   ?AO2 imp:augmentedType ?Type2.
   ?Type2 imp:constraints ?CL2.
   ?CL2 rdf:rest*/rdf:first ?C2.
   ?C2 imp:gpPredicate ?P.
   ?P rdfs:range ?In.}

  union { #Explicit inputs w/o AT
    ?Eq imp:arguments ?AL2.
    ?AL2 list:rest*/list:first ?AO2.
    filter not exists {?AO2 imp:augmentedType []}
    ?AO2 imp:localDescriptorName ?In.}

  union {?Eq imp:implicitInput/imp:augmentedType/imp:semType ?In.
   filter not exists{?Eq a imp:IntializerMethod} }

  union {
   ?Eq imp:implicitOutput/imp:localDescriptorName ?Out.
   filter not exists{?Eq a imp:IntializerMethod} }

union {
   ?Eq imp:implicitInput?IO.
   filter not exists {?IO imp:augmentedType [] }
   ?IO imp:localDescriptorName ?In.
   filter not exists{?Eq a imp:IntializerMethod} } 
}


prefix cg:<http://aske.ge.com/compgraphmodel#>
prefix imp:<http://sadl.org/sadlimplicitmodel#>
prefix sci:<http://aske.ge.com/sciknow#>
prefix list:<http://sadl.org/sadllistmodel#>

select distinct ?Eq ?In ?Out 
#insert
#construct
#{ ?Eq imp:genericInput ?In. ?Eq imp:genericOutput ?Out. }
where {
  
 ?Eq imp:returnTypes ?AL1.
  ?AL1 list:rest*/list:first ?AO1.
  ?AO1 imp:augmentedType ?Type1.
  ?Type1 imp:constraints ?CL1.
  ?CL1 rdf:rest*/rdf:first ?C1.
  ?C1 imp:gpPredicate ?P.
  ?P rdfs:range ?Out. 

   ?Eq imp:arguments ?AL2.
   ?AL2 list:rest*/list:first ?AO2.
   ?AO2 imp:augmentedType ?Type2.
   ?Type2 imp:constraints ?CL2.
   ?CL2 rdf:rest*/rdf:first ?C2.
   ?C2 imp:gpPredicate ?P1.
   ?P1 rdfs:range ?In.

}